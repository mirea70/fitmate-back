bootJar { enabled = true }
jar { enabled = false }

dependencies {
    // module
    implementation project(':port')
    implementation project(':usecase')
    implementation project(':domain')
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'
	implementation 'org.springdoc:springdoc-openapi-security:1.8.0'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.auth0:java-jwt:4.0.0'
    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'com.oracle.database.jdbc:ojdbc10:19.18.0.0'
    implementation 'com.oracle.database.security:osdt_cert'
    implementation 'com.oracle.database.security:oraclepki'
    implementation 'com.oracle.database.security:osdt_core'
    // queryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    implementation 'com.querydsl:querydsl-apt:5.0.0'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    // sms
    implementation 'net.nurigo:sdk:4.3.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks {
    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

def querydslSrcDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDirs += [ querydslSrcDir ]
        }
    }
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
    delete file(querydslSrcDir)
}